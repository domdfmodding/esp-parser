#!/usr/bin/env python3
#
#  __main__.py
"""
Command-line too to output a representation of an ESP file as text or Python source code.
"""
#
#  Copyright Â© 2024 Dominic Davis-Foster <dominic@davis-foster.co.uk>
#
#  Permission is hereby granted, free of charge, to any person obtaining a copy
#  of this software and associated documentation files (the "Software"), to deal
#  in the Software without restriction, including without limitation the rights
#  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#  copies of the Software, and to permit persons to whom the Software is
#  furnished to do so, subject to the following conditions:
#
#  The above copyright notice and this permission notice shall be included in all
#  copies or substantial portions of the Software.
#
#  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#  EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#  MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
#  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
#  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
#  OR OTHER DEALINGS IN THE SOFTWARE.
#

# stdlib
from typing import Optional, cast

# 3rd party
import click
from consolekit import click_command
from consolekit.options import flag_option

__all__ = ["main"]


@flag_option("-p", "--python", help="Output as a Python function.")
@click.argument("OUTPUT_FILE", required=False, default=None)
@click.argument("ESP_FILE")
@click_command()
def main(esp_file: str, output_file: Optional[str] = None, python: bool = False) -> None:
	"""
	Output a representation of an ESP file as text or Python source code.
	"""

	# stdlib
	from io import BytesIO

	# 3rd party
	from domdf_python_tools.paths import PathPlus

	# this package
	import esp_parser
	from esp_parser.output import records_as_python, records_as_text, reformat

	filename = PathPlus(esp_file)
	plugin_name = filename.stem

	with filename.open("rb") as fp:
		records = esp_parser.parse_esp(cast(BytesIO, fp))

		if python:

			docstring = f"# Generated by esp-parser {esp_parser.__version__} from {filename.name}\n\n"

			output = docstring + records_as_python(records, plugin_name)
			if output_file is None:
				output_file = f"{plugin_name}.py"
		else:
			output = records_as_text(records)
			if output_file is None:
				output_file = f"{plugin_name}.txt"

	reformatted_output = reformat(output, output_file)

	assert output_file is not None

	if output_file == '-':
		print(str(reformatted_output))
	else:
		with open(output_file, 'w', encoding="UTF-8") as fp:
			fp.write(str(reformatted_output))


if __name__ == "__main__":
	main()
